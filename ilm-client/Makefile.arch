# Defaults
CXX = g++
#CXXFLAGS = -Wall -W -Wdeclaration-after-statement
CXXFLAGS := -Wall -Wextra -ansi -fPIC
LDFLAGS = -lpthread -lc

.PHONY: ARCH_BUILD
include ARCH_BUILD

ifeq ("$(TARGET)", "linux-x86")
include ../common/Makefile-include.linux-x86
else ifeq ("$(TARGET)", "linux-x86_64")
include ../common/Makefile-include.linux-x86_64
endif

ifdef DEBUG
  CXXFLAGS += -g
  CXXFLAGS += -DPOLARSSL_DEBUG_C -DPOLARSSL_DEBUG_MSG -DDEBUG
  CXXFLAGS += -O0
else
  CXXFLAGS += -O2
endif

CC = gcc
GCCVERSION_GT_4.6 = $(shell expr `gcc -dumpversion | cut -f1,2 -d.` \>= 4.6)

BINARY = hclient-$(TARGET)

#===============================================================================
CLIENT = ../client
COMMON = ../common
CRYPTO = $(COMMON)/crypto
SSL = $(COMMON)/ssl
LIBSSL_INCLUDES = $(SSL)/include
LIBSSL = $(SSL)/library/libpolarssl.a
LIBCRYPTO = $(CRYPTO)/libcrypto.a
STRINGS = $(COMMON)/strings
#===============================================================================
.PHONY: force-rebuild
$(info )
$(info )
$(info =========================================================================)
ifdef ARCH_BUILD_CLIENT
  ifneq ("$(ARCH_BUILD_ILMCLIENT)", "$(TARGET)")
    ILMCLIENT_REBUILD:=clean
    $(info .       Rebuilding ILMCLIENT))
  else
    ILMCLIENT_REBUILD:=
    $(info .       ILMCLIENT for $(TARGET) previously built.)
  endif
else
  ILMCLIENT_REBUILD:=clean
    $(info .       Building ILMCLIENT)
endif

ifdef ARCH_BUILD_CRYPTO
  ifneq ("$(ARCH_BUILD_CRYPTO)", "$(TARGET)")
    CRYPTO_REBUILD:=force-rebuild
  else
    CRYPTO_REBUILD:=
  endif
else
  CRYPTO_REBUILD:=force-rebuild
endif

ifdef ARCH_BUILD_SSL
  ifneq ("$(ARCH_BUILD_SSL)", "$(TARGET)")
    SSL_REBUILD:=force-rebuild
  else
    SSL_REBUILD:=
  endif
else
  SSL_REBUILD:=force-rebuild
endif

ifdef ARCH_BUILD_CLIENTLIB
  ifneq ("$(ARCH_BUILD_CLIENTLIB)", "$(TARGET)")
    CLIENTLIB_REBUILD:=force-rebuild
  else
    CLIENTLIB_REBUILD:=
  endif
else
  CLIENTLIB_REBUILD:=force-rebuild
endif
#===============================================================================

ifeq "$(GCCVERSION_GT_4.6)" "1"
	CXXFLAGS += -Wno-unused-result
endif

CRYPTCAT = -DLINUX cryptcat/netcat.c

LIBHCLIENT = $(CLIENT)/libhclient.a
LIBCRYPTCAT = $(CLIENT)/libcryptcat.a
HCLIENT = $(CLIENT)/hclient-$(TARGET)

INCLUDES = -I. -I$(CRYPTO) -I$(CLIENT) -I$(LIBSSL_INCLUDES) -Iinclude
INCLUDES += -I$(CLIENT)/cryptcat

CXXFLAGS += $(INCLUDES)

# Library order here necessary to resolve circular dependencies
LIBS = libILM_SDK.a $(LIBHCLIENT) $(LIBSSL) $(LIBCRYPTO) $(LIBSSL) $(LIBCRYPTO)

OBJS += Command.o
OBJS += File.o
OBJS += Ilm.o
OBJS += Connection.o
OBJS += Utilities.o
OBJS += hive.o
OBJS += $(STRINGS)/string_utils.o
OUTFILE = hive

$(info =========================================================================)
$(info .   TARGET: $(TARGET))
$(info .   SRCDIR: $(PWD))
$(info . CXXFLAGS: $(CXXFLAGS))
$(info .  LDFLAGS: $(LDFLAGS))
$(info =========================================================================)
$(info )

.SILENT:
.PHONY: all
all: $(LIBSSL) $(LIBHCLIENT) $(HCLIENT) cryptcat $(LIBCRYPTO) $(OBJS)
	$(CXX) $(CXXFLAGS) -shared $(INCLUDES) $(OBJS) $(LDFLAGS) $(LIBS) -o $(OUTFILE)
	md5sum $(OUTFILE) > $(OUTFILE).md5
	echo "ARCH_BUILD_ILMCLIENT=$(TARGET)" > ARCH_BUILD
	printf "\n=========================================================================\n"
	printf "\tBUILDING ILM CLIENT COMPLETE\n"
	printf "=========================================================================\n"
#	rm -f cryptcat.h

$(LIBSSL): $(SSL_REBUILD)
	cd $(SSL)/library && $(MAKE) TARGET=linux-x86


$(HCLIENT)-$(TARGET):
	cd $(CLIENT) && $(MAKE) TARGET=$(TARGET)
	cp $(CLIENT)/HCLIENT) .

libhclient: $(LIBHCLIENT)

$(LIBHCLIENT): $(CLIENTLIB_REBUILD)
	cd $(CLIENT) && $(MAKE) TARGET=$(TARGET) library

libcryptcat: $(LIBCRYPTCAT)

$(LIBCRYPTCAT):
	cd $(CLIENT)/ $(MAKE) libcryptcat

$(LIBCRYPTO): $(CRYPTO_REBUILD)
	cd $(CRYPTO) && $(MAKE) TARGET=$(TARGET)

$(STRINGS)/string_utils.o: $(STRINGS)/string_utils.c $(STRINGS)/string_utils.h
	cd $(STRINGS) && ${CC} ${CFLAGS} -c string_utils.c string_utils.h

.PHONY: cryptcat
cryptcat:
	printf "\n=========================================================================\n"
	printf "\tBUILDING $@\n"
	printf "=========================================================================\n"
	cd $(CLIENT)/cryptcat && $(MAKE) linux
	xxd -i $(CLIENT)/cryptcat/cryptcat cryptcat.h
	printf "\n\n"

.PHONY: test
test:
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c hive.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c GenRandomBytes.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c TxCommand.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c ListenHandler.cpp
	$(CXX) $(CXXFLAGS) -shared $(INCLUDES) *.o $(LIBS) -o $(OUTFILE)


.PHONY: clean
clean:
	rm -f *.o $(OUTFILE) $(CLIENT)/cryptcat/cryptcat cryptcat.h
	rm -f $(LIBHCLIENT)
	rm -f $(LIBCRYPTCAT)
	rm -f hclient-linux-dbg
	rm -f $(OUTFILE).md5
	$(MAKE) -C $(SSL)/library clean
	$(MAKE) -C $(CLIENT) clean
	$(MAKE) -C $(CRYPTO) clean
	$(MAKE) -C $(STRINGS) clean
	>ARCH_BUILD

.cpp.o:
	printf "\tC++\t$<\n"
	$(CXX) $(CXXFLAGS) -c $<
