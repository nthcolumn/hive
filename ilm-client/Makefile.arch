
# Defaults
CXX = g++
#CXXFLAGS = -Wall -W -Wdeclaration-after-statement
CXXFLAGS := -Wall -Wextra -Os -ansi -fPIC
LDFLAGS = -lpthread -lc
OFLAGS	= -O2

ifeq ("$(TARGET)", "linux-x86")
include ../common/Makefile-include.linux-x86
else ifeq ("$(TARGET)", "linux-x86_64")
include ../common/Makefile-include.linux-x86_64
else 
$(error Invalid target "$(TARGET)")
endif

ifdef DEBUG
CXXFLAGS += -g3
CXXFLAGS += -DPOLARSSL_DEBUG_C -DPOLARSSL_DEBUG_MSG
endif
CC = gcc
GCCVERSION_GT_4.6 = $(shell expr `gcc -dumpversion | cut -f1,2 -d.` \>= 4.6)

BINARY = hclient-$(TARGET)

#===============================================================================
CLIENT = ../client
COMMON = ../common
CRYPTO = $(COMMON)/crypto
SSL = $(COMMON)/ssl
LIBSSL_INCLUDES = $(SSL)/include
LIBSSL = $(SSL)/library/libpolarssl.a
LIBCRYPTO = $(CRYPTO)/libcrypto.a
#===============================================================================
.PHONY: force-rebuild
ifdef ARCH_BUILD_CRYPTO
  ifneq ("$(ARCH_BUILD_CRYPTO)", "$(TARGET)")
    CRYPTO_REBUILD:=force-rebuild
  else
    CRYPTO_REBUILD:=
  endif
else
  CRYPTO_REBUILD:=force-rebuild
endif

ifdef ARCH_BUILD_SSL
  ifneq ("$(ARCH_BUILD_SSL)", "$(TARGET)")
    SSL_REBUILD:=force-rebuild
  else
    SSL_REBUILD:=
  endif
else
  SSL_REBUILD:=force-rebuild
endif


ifdef ARCH_BUILD_CLIENTLIB
  ifneq ("$(ARCH_BUILD_CLIENTLIB)", "$(TARGET)")
    CLIENTLIB_REBUILD:=force-rebuild
  else
    CLIENTLIB_REBUILD:=
  endif
else
  CLIENTLIB_REBUILD:=force-rebuild
endif
#===============================================================================

ifeq "$(GCCVERSION_GT_4.6)" "1"
	CXXFLAGS += -Wno-unused-result
endif


CRYPTCAT = -DLINUX cryptcat/netcat.c

CFILES = main.c functions.c misc.c modes.c parser.c \
		trigger.c trigger_network.c \
		trigger_protocols.c b64.c trigger_utils.c threads.c \
		string_utils.o init_strings.o

LIBS = $(LIBCRYPTO) $(LIBSSL) $(LIBCRYPTO)

LIBHCLIENT = ../client/libhclient.a
LIBCRYPTCAT = ../client/libcryptcat.a
HCLIENT = ./hclient-linux

INCLUDES = -I. -I$(CRYPTO) -I../client -I$(LIBSSL_INCLUDES) -Iinclude
#INCLUDES += -I../client/cryptcat
#INCLUDES += -I../libs 

CXXFLAGS += $(INCLUDES)
DFLAGS = $(CXXFLAGS) -DDEBUG -D_DEBUG

#LIBS=$(LIBCRYPTCAT) $(LIBHCLIENT) libILM_SDK.a $(LIBPOLARSSL)
LIBS=$(LIBHCLIENT) libILM_SDK.a $(LIBSSL)
OBJS += Command.o
OBJS += File.o
OBJS += Ilm.o
OBJS += Connection.o
OBJS += Utilities.o
OBJS += hive.o
OUTFILE=hive

$(info )
$(info )
$(info =========================================================================)
$(info .       BUILDING ILM CLIENT)
$(info =========================================================================)
$(info .   TARGET: $(TARGET))
$(info .   SRCDIR: $(PWD))
$(info . CXXFLAGS: $(CXXFLAGS))
$(info .  LDFLAGS: $(LDFLAGS))
$(info =================================================)
$(info )

.SILENT:
.PHONY: all
all: cryptcat $(LIBSSL) $(LIBHCLIENT) $(HCLIENT) $(OBJS)
	$(CXX) $(CXXFLAGS) -shared $(INCLUDES) $(OBJS) $(LDFLAGS) -o $(OUTFILE)
	md5sum $(OUTFILE) > $(OUTFILE).md5
	printf "=========================================================================\n"
	printf "\tBUILDING ILM CLIENT COMPLETE\n"
	printf "=========================================================================\n"
	rm -f cryptcat.h

$(LIBSSL):
	cd $(SSL)/library && $(MAKE) TARGET=linux-x86


$(HCLIENT)-$(TARGET):
	cd $(CLIENT) && $(MAKE) TARGET=$(TARGET)
#	cp ../client/$(HCLIENT) .

libhclient: $(LIBHCLIENT)

$(LIBHCLIENT): $(CLIENTLIB_REBUILD)
	cd $(CLIENT) && $(MAKE) TARGET=$(TARGET) library

libcryptcat: $(LIBCRYPTCAT)

$(LIBCRYPTCAT):
	cd ../client && $(MAKE) libcryptcat

.PHONY: cryptcat
cryptcat:
	cd ../client/cryptcat && make linux
	xxd -i ../client/cryptcat/cryptcat cryptcat.h

.PHONY: test
test:
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c hive.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c GenRandomBytes.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c TxCommand.cpp
	$(CXX) $(CXXFLAGS) $(INCLUDES) -c ListenHandler.cpp
	$(CXX) $(CXXFLAGS) -shared $(INCLUDES) *.o $(LIBS) -o $(OUTFILE)
#	$(CXX) $(CXXFLAGS) -I $(INCLUDES) -L $(LPATH) -l $(LIB) $(SRC) -o $(OUTFILE)

.PHONY: clean
clean:
	rm -f *.o $(OUTFILE) ../client/cryptcat/cryptcat cryptcat.h
	rm -f $(LIBHCLIENT)
	rm -f $(LIBCRYPTCAT)
	rm -f hclient-linux-dbg
	rm -f $(OUTFILE).md5
	make -C $(SSL)/library clean
	make -C ../client clean

.cpp.o:
	printf "\tC++\t$<\n"
	$(CXX) $(CXXFLAGS) -c $<
